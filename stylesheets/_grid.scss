@import "mixins";


///grid

///this is more or less a port of the Foundation grid

///media-queries are not hard-coded,instead obeying the breakpoint-settings
///default,tablet,desktop replace small, medium,large, although the latter are left in for compatibility reasons
///custom tags grid-row,grid-column replace .row, .columns as class attributes of the div tag
///no flag setting for semantic inclusion...must be called via a mixin
///flag setting to prevent any touch horizontal screen scroll for content width greater than device width



/// @access public
@mixin grid-row($type: null,
$row-width: map-get($Grid,width),
$column-gutter: map-get($Grid,column-gutter)) {

  @if $type == nest {
    margin-left: -($column-gutter/2);
    margin-right: -($column-gutter/2);
    max-width: none;
    width: auto;
  } @else if $type == collapse {
    margin-left: 0;
    margin-right: 0;
    max-width: $row-width;
    width: 100%;
  } @else if $type == nest-collapse {
    margin-left: 0;
    margin-right: 0;
    max-width: none;
    width: auto;
  } @else {
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
    width: 100%;
  }

  @include clearfix();
}

/// @access public
@mixin grid-column($columns: false,
$last-column: false,
$center: false,
$offset: false,
$push: false,
$pull: false,
$collapse: false,
$float: true,
$column-gutter: map-get($Grid,column-gutter),
$total-columns: map-get($Grid,columns)) {

  position: relative;

  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  } @else if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  @if $columns {
    width: grid-calc($columns, $total-columns);
    @if $last-column {
      float: right;
    }
  }

  @if $offset {
    margin-left: grid-calc($offset, $total-columns);
  }

  @if $push {
    left: grid-calc($push, $total-columns);
    right: auto;
  }
  @if $pull {
    right: grid-calc($pull, $total-columns);
    left: auto;
  }

  @if $center {
    margin-left: auto;
    margin-right: auto;
    float: none !important;
  }
  @if $float {
    @if $float == left or $float == true {
      float: left;
    } @else if $float == right {
      float: right;
    } @else {
      float: none;
    }
  }

}

/// @access public
@mixin grid($row-width: map-get($Grid,width),
$column-gutter: map-get($Grid,column-gutter),
$total-columns: map-get($Grid,columns),
$touch-horizontal-constrain: map-get($Grid,touch-horizontal-constrain),
$margin-top:null,
$margin-bottom:null,
$touch-margin-top:null,
$touch-margin-bottom:null) {


  grid-row,grid-columns{
    display:block;
  }
  grid-row {
    @include grid-row($row-width: $row-width, $column-gutter: $column-gutter);

    &.collapse {
      grid-columns{
        @include grid-column($collapse: true, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    grid-row {
      @include grid-row($type: nest, $row-width: $row-width, $column-gutter: $column-gutter);
      &.collapse {
        @include grid-row($type: nest-collapse, $row-width: $row-width, $column-gutter: $column-gutter);
      }
    }
  }

  grid-columns {
    @include grid-column($columns: $total-columns, $column-gutter: $column-gutter, $total-columns: $total-columns);
  }

  grid-columns{
    &.no-gutter{
      padding-left:0;
      padding-right:0;
    }
  }

  ///default screen
  @media only screen {

    @for $i from 1 through $grid-columns {
      .default-#{$i},
      .small-#{$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    @for $i from 0 through $grid-columns - 2 {
      .default-offset-#{$i},
      .small-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    grid-columns{
      &:last-child{
        float: right;
      }
    }
    grid-columns{
      &.end{
        float:left;
      }
    }

    grid-columns.default-centered,
    grid-columns.small-centered{
      @include grid-column($center: true, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
    }
  }

  ///tablet(or medium)
  @include medium-content() {

    @for $i from 1 through $grid-columns {
      .tablet-#{$i},
      .medium-#{$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    @for $i from 0 through $grid-columns - 1 {
      .tablet-offset-#{$i},
      .medium-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    @for $i from 1 through $grid-columns - 1 {
      .tablet-push-#{$i},
      .medium-push-#{$i} {
        @include grid-column($push: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
      .tablet-pull-#{$i},
      .medium-pull-#{$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    grid-columns.tablet-centered,
    grid-columns.medium-centered{
      @include grid-column($center: true, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
    }

    grid-columns.tablet-uncentered,
    grid-columns.medium-uncentered{
      margin-left: 0;
      margin-right: 0;
      float: left !important;
    }

  }

  ///desktop(or large)
  @include large-content() {

    @for $i from 1 through $grid-columns {
      .desktop-#{$i},
      .large-#{$i} {
        @include grid-column($columns: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    @for $i from 0 through $grid-columns - 1 {
      .desktop-offset-#{$i},
      .large-offset-#{$i} {
        @include grid-column($offset: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    @for $i from 1 through $grid-columns - 1 {
      .desktop-push-#{$i},
      .large-push-#{$i} {
        @include grid-column($push: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
      .desktop-pull-#{$i},
      .large-pull-#{$i} {
        @include grid-column($pull: $i, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
      }
    }

    grid-columns.desktop-centered,
    grid-columns.large-centered{
      @include grid-column($center: true, $collapse: null, $float: false, $column-gutter: $column-gutter, $total-columns: $total-columns);
    }

    grid-columns.desktop-uncentered,
    grid-columns.large-uncentered{
      margin-left: 0;
      margin-right: 0;
      float: left !important;
    }

  }

  @if($margin-top !=null){
    grid-row{
      margin-top:$margin-top;
    }
  }
  @if($margin-bottom !=null){
    grid-row{
      margin-bottom:$margin-bottom;
    }
  }
  ///enforce no screen horizontal scrolling
  @if $touch-horizontal-constrain {
    @include touch-content(){
      grid-row {
        &.overflow-hidden {
          overflow-x: hidden;
        }
        &.padding{
          padding-bottom:1em;
        }
        @if($touch-margin-top !=null){
          margin-top:$touch-margin-top;
        }
        @if($touch-margin-bottom !=null){
          margin-bottom:$touch-margin-bottom;
        }
      }
      grid-columns{
        &.no-gutter{
          padding-left:0;
          padding-right:0;
        }
      }
    }
  }

  @content;
}

